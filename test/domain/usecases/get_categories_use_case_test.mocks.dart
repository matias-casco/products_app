// Mocks generated by Mockito 5.4.5 from annotations
// in products_app/test/domain/usecases/get_categories_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:products_app/core/errors/failures.dart' as _i6;
import 'package:products_app/products/data/models/categories/categories_model.dart'
    as _i9;
import 'package:products_app/products/data/models/categories/category_model.dart'
    as _i10;
import 'package:products_app/products/domain/entities/categories/categories.dart'
    as _i2;
import 'package:products_app/products/domain/entities/categories/category.dart'
    as _i11;
import 'package:products_app/products/domain/entities/products/products.dart'
    as _i7;
import 'package:products_app/products/domain/repositories/products_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategories_0 extends _i1.SmartFake implements _i2.Categories {
  _FakeCategories_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepository extends _i1.Mock
    implements _i3.ProductsRepository {
  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.Products>> getProducts({
    int? limit = 24,
    int? skip = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, [], {#limit: limit, #skip: skip}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Products>>(
                    this,
                    Invocation.method(#getProducts, [], {
                      #limit: limit,
                      #skip: skip,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Products>>(
                    this,
                    Invocation.method(#getProducts, [], {
                      #limit: limit,
                      #skip: skip,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i2.Categories>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i2.Categories>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i2.Categories>>(
                    this,
                    Invocation.method(#getCategories, []),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i2.Categories>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i2.Categories>>(
                    this,
                    Invocation.method(#getCategories, []),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i2.Categories>>);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.Products>> getProductsByCategory({
    required String? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProductsByCategory, [], {#slug: slug}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Products>>(
                    this,
                    Invocation.method(#getProductsByCategory, [], {
                      #slug: slug,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Products>>(
                    this,
                    Invocation.method(#getProductsByCategory, [], {
                      #slug: slug,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.Products>>);
}

/// A class which mocks [CategoriesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesModel extends _i1.Mock implements _i9.CategoriesModel {
  @override
  List<_i10.CategoryModel> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: <_i10.CategoryModel>[],
            returnValueForMissingStub: <_i10.CategoryModel>[],
          )
          as List<_i10.CategoryModel>);

  @override
  set categories(List<_i10.CategoryModel>? _categories) => super.noSuchMethod(
    Invocation.setter(#categories, _categories),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i2.Categories toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeCategories_0(
              this,
              Invocation.method(#toEntity, []),
            ),
            returnValueForMissingStub: _FakeCategories_0(
              this,
              Invocation.method(#toEntity, []),
            ),
          )
          as _i2.Categories);
}

/// A class which mocks [Categories].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategories extends _i1.Mock implements _i2.Categories {
  @override
  List<_i11.Category> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: <_i11.Category>[],
            returnValueForMissingStub: <_i11.Category>[],
          )
          as List<_i11.Category>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(
            Invocation.getter(#props),
            returnValue: <Object?>[],
            returnValueForMissingStub: <Object?>[],
          )
          as List<Object?>);
}
