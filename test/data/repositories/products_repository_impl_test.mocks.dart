// Mocks generated by Mockito 5.4.5 from annotations
// in products_app/test/data/repositories/products_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:products_app/products/data/datasources/products_datasource.dart'
    as _i6;
import 'package:products_app/products/data/models/categories/categories_model.dart'
    as _i3;
import 'package:products_app/products/data/models/categories/category_model.dart'
    as _i9;
import 'package:products_app/products/data/models/products/product_model.dart'
    as _i8;
import 'package:products_app/products/data/models/products/products_model.dart'
    as _i2;
import 'package:products_app/products/domain/entities/categories/categories.dart'
    as _i5;
import 'package:products_app/products/domain/entities/products/products.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductsModel_0 extends _i1.SmartFake implements _i2.ProductsModel {
  _FakeProductsModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategoriesModel_1 extends _i1.SmartFake
    implements _i3.CategoriesModel {
  _FakeCategoriesModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProducts_2 extends _i1.SmartFake implements _i4.Products {
  _FakeProducts_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategories_3 extends _i1.SmartFake implements _i5.Categories {
  _FakeCategories_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductsDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsDatasource extends _i1.Mock
    implements _i6.ProductsDatasource {
  @override
  _i7.Future<_i2.ProductsModel> getProducts({int? limit = 24, int? skip = 0}) =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, [], {#limit: limit, #skip: skip}),
            returnValue: _i7.Future<_i2.ProductsModel>.value(
              _FakeProductsModel_0(
                this,
                Invocation.method(#getProducts, [], {
                  #limit: limit,
                  #skip: skip,
                }),
              ),
            ),
            returnValueForMissingStub: _i7.Future<_i2.ProductsModel>.value(
              _FakeProductsModel_0(
                this,
                Invocation.method(#getProducts, [], {
                  #limit: limit,
                  #skip: skip,
                }),
              ),
            ),
          )
          as _i7.Future<_i2.ProductsModel>);

  @override
  _i7.Future<_i3.CategoriesModel> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i7.Future<_i3.CategoriesModel>.value(
              _FakeCategoriesModel_1(
                this,
                Invocation.method(#getCategories, []),
              ),
            ),
            returnValueForMissingStub: _i7.Future<_i3.CategoriesModel>.value(
              _FakeCategoriesModel_1(
                this,
                Invocation.method(#getCategories, []),
              ),
            ),
          )
          as _i7.Future<_i3.CategoriesModel>);

  @override
  _i7.Future<_i2.ProductsModel> getProductsByCategory({
    required String? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProductsByCategory, [], {#slug: slug}),
            returnValue: _i7.Future<_i2.ProductsModel>.value(
              _FakeProductsModel_0(
                this,
                Invocation.method(#getProductsByCategory, [], {#slug: slug}),
              ),
            ),
            returnValueForMissingStub: _i7.Future<_i2.ProductsModel>.value(
              _FakeProductsModel_0(
                this,
                Invocation.method(#getProductsByCategory, [], {#slug: slug}),
              ),
            ),
          )
          as _i7.Future<_i2.ProductsModel>);
}

/// A class which mocks [ProductsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsModel extends _i1.Mock implements _i2.ProductsModel {
  @override
  List<_i8.ProductModel> get products =>
      (super.noSuchMethod(
            Invocation.getter(#products),
            returnValue: <_i8.ProductModel>[],
            returnValueForMissingStub: <_i8.ProductModel>[],
          )
          as List<_i8.ProductModel>);

  @override
  int get total =>
      (super.noSuchMethod(
            Invocation.getter(#total),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get skip =>
      (super.noSuchMethod(
            Invocation.getter(#skip),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get limit =>
      (super.noSuchMethod(
            Invocation.getter(#limit),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Products toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeProducts_2(
              this,
              Invocation.method(#toEntity, []),
            ),
            returnValueForMissingStub: _FakeProducts_2(
              this,
              Invocation.method(#toEntity, []),
            ),
          )
          as _i4.Products);
}

/// A class which mocks [CategoriesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesModel extends _i1.Mock implements _i3.CategoriesModel {
  @override
  List<_i9.CategoryModel> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: <_i9.CategoryModel>[],
            returnValueForMissingStub: <_i9.CategoryModel>[],
          )
          as List<_i9.CategoryModel>);

  @override
  set categories(List<_i9.CategoryModel>? _categories) => super.noSuchMethod(
    Invocation.setter(#categories, _categories),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i5.Categories toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeCategories_3(
              this,
              Invocation.method(#toEntity, []),
            ),
            returnValueForMissingStub: _FakeCategories_3(
              this,
              Invocation.method(#toEntity, []),
            ),
          )
          as _i5.Categories);
}
