// Mocks generated by Mockito 5.4.5 from annotations
// in products_app/test/presentation/pages/products_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_core/firebase_core.dart' as _i7;
import 'package:firebase_core_platform_interface/firebase_core_platform_interface.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:products_app/products/domain/entities/categories/category.dart'
    as _i5;
import 'package:products_app/products/presentation/cubits/products_page/products_page_cubit.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductsPageState_0 extends _i1.SmartFake
    implements _i2.ProductsPageState {
  _FakeProductsPageState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseOptions_1 extends _i1.SmartFake
    implements _i3.FirebaseOptions {
  _FakeFirebaseOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductsPageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsPageCubit extends _i1.Mock implements _i2.ProductsPageCubit {
  @override
  _i2.ProductsPageState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeProductsPageState_0(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeProductsPageState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.ProductsPageState);

  @override
  _i4.Stream<_i2.ProductsPageState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i2.ProductsPageState>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i2.ProductsPageState>.empty(),
          )
          as _i4.Stream<_i2.ProductsPageState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> init({required String? categorySlug}) =>
      (super.noSuchMethod(
            Invocation.method(#init, [], {#categorySlug: categorySlug}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> getProductsByCategory({required _i5.Category? category}) =>
      (super.noSuchMethod(
            Invocation.method(#getProductsByCategory, [], {
              #category: category,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void emit(_i2.ProductsPageState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i2.ProductsPageState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FirebaseApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApp extends _i1.Mock implements _i7.FirebaseApp {
  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i3.FirebaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeFirebaseOptions_1(
              this,
              Invocation.getter(#options),
            ),
            returnValueForMissingStub: _FakeFirebaseOptions_1(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i3.FirebaseOptions);

  @override
  bool get isAutomaticDataCollectionEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isAutomaticDataCollectionEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticDataCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticDataCollectionEnabled, [enabled]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticResourceManagementEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticResourceManagementEnabled, [
              enabled,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [Firebase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebase extends _i1.Mock implements _i7.Firebase {}
