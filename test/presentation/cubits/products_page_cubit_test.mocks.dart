// Mocks generated by Mockito 5.4.5 from annotations
// in products_app/test/presentation/cubits/products_page_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:products_app/core/errors/failures.dart' as _i7;
import 'package:products_app/core/usecases/use_case.dart' as _i8;
import 'package:products_app/products/data/models/categories/categories_model.dart'
    as _i14;
import 'package:products_app/products/data/models/categories/category_model.dart'
    as _i15;
import 'package:products_app/products/data/models/products/product_model.dart'
    as _i13;
import 'package:products_app/products/data/models/products/products_model.dart'
    as _i12;
import 'package:products_app/products/domain/entities/categories/categories.dart'
    as _i3;
import 'package:products_app/products/domain/entities/categories/category.dart'
    as _i17;
import 'package:products_app/products/domain/entities/products/product_details.dart'
    as _i16;
import 'package:products_app/products/domain/entities/products/products.dart'
    as _i2;
import 'package:products_app/products/domain/usecases/get_categories_use_case.dart'
    as _i10;
import 'package:products_app/products/domain/usecases/get_products_by_category_use_case.dart'
    as _i11;
import 'package:products_app/products/domain/usecases/get_products_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProducts_0 extends _i1.SmartFake implements _i2.Products {
  _FakeProducts_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategories_1 extends _i1.SmartFake implements _i3.Categories {
  _FakeCategories_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUseCase extends _i1.Mock
    implements _i4.GetProductsUseCase {
  @override
  _i5.Future<_i6.Either<_i7.Failure, _i2.Products>> call(
    _i8.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i2.Products>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i2.Products>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>);
}

/// A class which mocks [GetCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesUseCase extends _i1.Mock
    implements _i10.GetCategoriesUseCase {
  @override
  _i5.Future<_i6.Either<_i7.Failure, _i3.Categories>> call(
    _i8.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, _i3.Categories>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i3.Categories>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i6.Either<_i7.Failure, _i3.Categories>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i3.Categories>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, _i3.Categories>>);
}

/// A class which mocks [GetProductsByCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsByCategoryUseCase extends _i1.Mock
    implements _i11.GetProductsByCategoryUseCase {
  @override
  _i5.Future<_i6.Either<_i7.Failure, _i2.Products>> call(
    _i11.GetProductsByCategoryUseCaseParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i2.Products>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>.value(
                  _i9.dummyValue<_i6.Either<_i7.Failure, _i2.Products>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, _i2.Products>>);
}

/// A class which mocks [ProductsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsModel extends _i1.Mock implements _i12.ProductsModel {
  @override
  List<_i13.ProductModel> get products =>
      (super.noSuchMethod(
            Invocation.getter(#products),
            returnValue: <_i13.ProductModel>[],
            returnValueForMissingStub: <_i13.ProductModel>[],
          )
          as List<_i13.ProductModel>);

  @override
  int get total =>
      (super.noSuchMethod(
            Invocation.getter(#total),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get skip =>
      (super.noSuchMethod(
            Invocation.getter(#skip),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get limit =>
      (super.noSuchMethod(
            Invocation.getter(#limit),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i2.Products toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeProducts_0(
              this,
              Invocation.method(#toEntity, []),
            ),
            returnValueForMissingStub: _FakeProducts_0(
              this,
              Invocation.method(#toEntity, []),
            ),
          )
          as _i2.Products);
}

/// A class which mocks [CategoriesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesModel extends _i1.Mock implements _i14.CategoriesModel {
  @override
  List<_i15.CategoryModel> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: <_i15.CategoryModel>[],
            returnValueForMissingStub: <_i15.CategoryModel>[],
          )
          as List<_i15.CategoryModel>);

  @override
  set categories(List<_i15.CategoryModel>? _categories) => super.noSuchMethod(
    Invocation.setter(#categories, _categories),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Categories toEntity() =>
      (super.noSuchMethod(
            Invocation.method(#toEntity, []),
            returnValue: _FakeCategories_1(
              this,
              Invocation.method(#toEntity, []),
            ),
            returnValueForMissingStub: _FakeCategories_1(
              this,
              Invocation.method(#toEntity, []),
            ),
          )
          as _i3.Categories);
}

/// A class which mocks [Products].
///
/// See the documentation for Mockito's code generation for more information.
class MockProducts extends _i1.Mock implements _i2.Products {
  @override
  List<_i16.ProductDetails> get productsDetails =>
      (super.noSuchMethod(
            Invocation.getter(#productsDetails),
            returnValue: <_i16.ProductDetails>[],
            returnValueForMissingStub: <_i16.ProductDetails>[],
          )
          as List<_i16.ProductDetails>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(
            Invocation.getter(#props),
            returnValue: <Object?>[],
            returnValueForMissingStub: <Object?>[],
          )
          as List<Object?>);
}

/// A class which mocks [Categories].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategories extends _i1.Mock implements _i3.Categories {
  @override
  List<_i17.Category> get categories =>
      (super.noSuchMethod(
            Invocation.getter(#categories),
            returnValue: <_i17.Category>[],
            returnValueForMissingStub: <_i17.Category>[],
          )
          as List<_i17.Category>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(
            Invocation.getter(#props),
            returnValue: <Object?>[],
            returnValueForMissingStub: <Object?>[],
          )
          as List<Object?>);
}
